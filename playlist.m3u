# convert.py (ULTRA-AGGRESSIVE FILTER: Checks for 2xx AND content type)

import json
import os
import sys
import requests

OUTPUT_FILE_NAME = "playlist.m3u"
EPG_URL = "https://avkb.short.gy/jioepg.xml.gz"

# --- Function to check stream validity aggressively ---
def is_stream_live_or_valid(url):
    """
    Aggressively checks for stream validity by ensuring the response is 2xx 
    AND the Content-Type header suggests a stream (video, dash, m3u8), not a webpage.
    """
    if not url:
        return False
    
    try:
        # Use a HEAD request for speed; allow redirects. Use short timeout.
        with requests.head(url, timeout=3, allow_redirects=True) as response:
            
            # Check 1: Must return a successful status code (2xx)
            if not 200 <= response.status_code < 300:
                return False
            
            # Check 2: Content-Type must NOT be HTML/Text (Placeholder Page)
            content_type = response.headers.get('Content-Type', '').lower()
            if 'html' in content_type or 'text/html' in content_type:
                 return False

            # Check 3 (Optional, but useful for streams): Look for stream-related types
            if 'video' in content_type or 'application/dash+xml' in content_type or 'application/vnd.apple.mpegurl' in content_type:
                 return True

            # If it's 2xx but doesn't have a clear video/stream content type, assume failure.
            return False
            
    except requests.exceptions.RequestException as e:
        # Treat all connection failures (timeouts, DNS, severe geo-blocks) as dead links.
        return False
# --------------------------------------------------------------------------


def json_to_m3u(json_url):
    # ... (JSON fetching and data initialization remains the same)
    print(f"Fetching data from URL...")
    try:
        response = requests.get(json_url, timeout=15)
        response.raise_for_status()
        data = response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching or decoding JSON: {e}")
        sys.exit(1)
        
    if not isinstance(data, list):
        print("Error: JSON root must be a list of stream objects. Check your JSON format.")
        sys.exit(1)

    m3u_lines = [
        "#EXTM3U",
        f'#EXTM3U x-tvg-url="{EPG_URL}"'
    ]
    
    working_channel_count = 0
    
    for stream in data:
        channel_name = stream.get('channel_name', 'Unknown Channel')
        stream_url = stream.get('channel_url', '')

        # === AGGRESSIVE CONTENT-TYPE VALIDATION ===
        print(f"⚙️ Validating: {channel_name}...")
        if not is_stream_live_or_valid(stream_url):
            print(f"❌ Removing: {channel_name} (Failed aggressive stream check).")
            continue
        
        working_channel_count += 1
        
        # --- A. BUILD #EXTINF LINE ---
        extinf_parts = ["#EXTINF:-1"]
        
        if stream.get('channel_id'):
            extinf_parts.append(f'tvg-id="{stream["channel_id"]}"')
        if stream.get('channel_genre'):
            extinf_parts.append(f'group-title="{stream["channel_genre"]}"')
        if stream.get('channel_logo'):
            extinf_parts.append(f'tvg-logo="{stream["channel_logo"]}"')
        
        extinf_line = " ".join(extinf_parts) + f",{channel_name}"
        m3u_lines.append(extinf_line)

        # --- B. COMBINE URL AND COOKIE (The player compatibility fix) ---
        final_stream_line = stream_url
        cookie_value = stream.get('cookie')
        
        if cookie_value:
            # Append cookie and user-agent using the universal '|' separator
            final_stream_line = f'{stream_url}|User-Agent=plaYtv/7.1.3 (Linux;Android 13) ygx/69.1 ExoPlayerLib/824.0&Cookie={cookie_value}'
            
        m3u_lines.append(final_stream_line)
        
    # 5. Write the M3U file
    try:
        with open(OUTPUT_FILE_NAME, 'w', encoding='utf-8') as f:
            f.write('\n'.join(m3u_lines) + '\n')
        print(f"\n✅ Conversion complete. Wrote {working_channel_count} filtered streams to {OUTPUT_FILE_NAME}")
    except IOError as e:
        print(f"Error writing to output file {OUTPUT_FILE_NAME}: {e}")
        sys.exit(1)

if __name__ == "__main__":
    url = os.getenv('JSON_SOURCE_URL')
    if not url:
        print("Fatal Error: JSON_SOURCE_URL environment variable is not set.")
        sys.exit(1)
        
    json_to_m3u(url)
